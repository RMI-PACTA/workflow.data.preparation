#cloud-config
package_upgrade: false
package_reboot_if_required: true

# Timeout: https://stackoverflow.com/a/71408252
apt:
  conf: |
    Acquire::Retries "60";
    DPkg::Lock::Timeout "60";
  sources:
    # Needed to install azure-cli
    microsoft:
      # keyid comes from:
      # curl  https://packages.microsoft.com/keys/microsoft.asc | gpg --with-fingerprint --with-colons | awk -F: '/^fpr/ { print $10 }'
      # see: https://stackoverflow.com/a/72629066
      keyid: "BC528686B50D79E339D3721CEB3E94ADBE1229CF"
      source: "deb https://packages.microsoft.com/repos/azure-cli/ $RELEASE main"

packages:
    - azure-cli
    - cifs-utils
    - docker.io

# create the docker group
groups:
    - docker

# assign a VM's default user, which is mydefaultuser, to the docker group
users:
    - default
    - name: azureuser
      groups: docker, staff

write_files:
    - encoding: text/plain
      content: |
        #! /bin/sh
        #  mount an Azure File Share at a given location.
        #  Requires az cli to be installed and logged in.
        usage() {
            echo "Usage: mount_afs.sh [-h] [-v] -r <resource group> -a <storage account name> -f <file share name> -m <mount point>"
            echo "  -h: help (this message)"
            echo "  -v: verbose"
            echo "  -r: resource group (Required)"
            echo "  -a: storage account name (Required)"
            echo "  -f: file share name (Required)"
            echo "  -m: mount point (Required)"
            echo "  -?: help"
            exit 1
        }
        while getopts "h?vr:a:f:m:" opt; do
            case "$opt" in
            h|\?)
                usage
                ;;
            v)  VERBOSE=1
                ;;
            r)  RESOURCEGROUP=$OPTARG
                ;;
            a)  STORAGEACCOUNTNAME=$OPTARG
                ;;
            f)  FILESHARENAME=$OPTARG
                ;;
            m)  MOUNTPOINT=$OPTARG
                ;;
            *)
                usage
                ;;
            esac
        done
        missing_opts=0
        if [ -z "$RESOURCEGROUP" ]; then
            echo "ERROR: Resource group is required"
            missing_opts=1
        fi
        if [ -z "$STORAGEACCOUNTNAME" ]; then
            echo "ERROR: Storage account name is required"
            missing_opts=1
        fi
        if [ -z "$FILESHARENAME" ]; then
            echo "ERROR: File share name is required"
            missing_opts=1
        fi
        if [ -z "$MOUNTPOINT" ]; then
            echo "ERROR: Mount point is required"
            missing_opts=1
        fi
        if [ $missing_opts -eq 1 ]; then
            usage
        fi
        if [ -n "$VERBOSE" ]; then
            echo "RESOURCEGROUP: $RESOURCEGROUP"
            echo "STORAGEACCOUNTNAME: $STORAGEACCOUNTNAME"
            echo "FILESHARENAME: $FILESHARENAME"
            echo "MOUNTPOINT: $MOUNTPOINT"
        fi
        # This command assumes you have logged in with az login
        if [ -n "$VERBOSE" ]; then
            echo "Getting https endpoint for storage account $STORAGEACCOUNTNAME"
        fi
        httpEndpoint=$(az storage account show \
          --resource-group "$RESOURCEGROUP" \
          --name "$STORAGEACCOUNTNAME" \
          --query "primaryEndpoints.file" --output tsv | tr -d '"')
        smbPath=$(echo "$httpEndpoint" | cut -c7-${#httpEndpoint})$FILESHARENAME
        fileHost=$(echo "$httpEndpoint" | cut -c7-${#httpEndpoint}| tr -d "/")
        nc -zvw3 "$fileHost" 445
        if [ -n "$VERBOSE" ]; then
            echo "httpEndpoint: $httpEndpoint"
            echo "smbPath: $smbPath"
            echo "fileHost: $fileHost"
        fi
        if [ -n "$VERBOSE" ]; then
            echo "Getting storage account key"
        fi
        storageAccountKey=$(az storage account keys list \
          --resource-group "$RESOURCEGROUP" \
          --account-name "$STORAGEACCOUNTNAME" \
          --query "[0].value" --output tsv | tr -d '"')
        if [ -n "$VERBOSE" ]; then
            echo "Creating mount path: $MOUNTPOINT"
        fi
        sudo mkdir -p "$MOUNTPOINT"
        if [ -n "$VERBOSE" ]; then
            echo "Mounting $smbPath to $MOUNTPOINT"
        fi
        sudo mount -t cifs "$smbPath" "$MOUNTPOINT" -o username="$STORAGEACCOUNTNAME",password="$storageAccountKey",serverino,nosharesock,actimeo=30,file_mode=0777,nobrl,dir_mode=0777,vers=3.1.1
      path: '/usr/local/bin/mount_afs'
      permissions: '0755'
    - encoding: text/plain
      content: |
        #! /bin/sh
        az login --identity
        mount_afs -v -r pacta-data -a pactarawdata -f factset-extracted -m /mnt/factset-extracted
        mount_afs -v -r pacta-data -a pactarawdata -f rawdata -m /mnt/rawdata
        mount_afs -v -r pacta-data -a pactadata -f data-prep-inputs -m /mnt/dataprep_inputs
        mount_afs -v -r pacta-data -a pactadata -f data-prep-outputs -m /mnt/outputs
        az acr login --name transitionmonitordockerregistry
        DOCKERIMAGE="transitionmonitordockerregistry.azurecr.io/workflow.data.preparation_aci"
        docker pull $DOCKERIMAGE
        docker run \
          -i -t --rm \
          --env DEPLOY_START_TIME=$(date -u +%Y%m%dT%H%M%SZ) \
          --env LOG_LEVEL=TRACE \
          --env R_CONFIG_ACTIVE=2022Q4_CICD \
          --mount type=bind,source=/mnt/dataprep_inputs,target=/mnt/dataprep_inputs \
          --mount type=bind,source=/mnt/factset-extracted,target=/mnt/factset-extracted,readonly \
          --mount type=bind,source=/mnt/outputs,target=/mnt/outputs \
          --mount type=bind,source=/mnt/rawdata,target=/mnt/rawdata,readonly \
          $DOCKERIMAGE
      path: '/usr/local/bin/run_dataprep_docker'
      permissions: '0755'

runcmd:
  - [chown, -R, azureuser, /home/azureuser]
  - [su, -c, "run_dataprep_docker", azureuser]
